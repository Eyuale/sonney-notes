import type { Metadata } from "next";
import Script from "next/script";
import { Geist, Geist_Mono, IBM_Plex_Sans } from "next/font/google";
import "./globals.css";
import "../styles/_variables.scss";
import "../styles/split-layout.scss";
import Providers from "@/components/auth/Providers";
import UserMenu from "@/components/auth/UserMenu";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const ibmPlexSans = IBM_Plex_Sans({
  variable: "--font-ibm-plex-sans",
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700"],
  style: ["normal", "italic"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${ibmPlexSans.variable} antialiased`}
      >
        <Providers>
          <header
            style={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              padding: "0.75rem 1rem",
              borderBottom: "1px solid var(--tt-border-color, #e5e7eb)",
              background: "var(--tt-sidebar-bg-color, var(--background))",
              color: "var(--tt-header-foreground, var(--foreground, #1A1C1E))",
              zIndex: 10,
            }}
          >
            <div style={{ fontWeight: 600 }}>Lesson Builder</div>
            <UserMenu />
          </header>
          <Script id="theme-init" strategy="beforeInteractive">
            {`
              try {
                const stored = localStorage.getItem('theme');
                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                const wantDark = stored ? stored === 'dark' : prefersDark;
                const root = document.documentElement;
                if (wantDark) root.classList.add('dark'); else root.classList.remove('dark');
              } catch {}
            `}
          </Script>
          {children}
        </Providers>
      </body>
    </html>
  );
}
